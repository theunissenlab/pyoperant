---
# Experiment description
name: Go No-Go Interruption
description: >
    Runs a version of the Go No-Go Interruption experiment for the Theunissen lab
experimenter:
    name: Frederic Theunissen

# Experiment properties
subject_name: &subject ColCol0000M

# File paths
stim_base_dir: &stimbase ""
stim_directory: &stims ""
# This is the root directory and will be appended with subject and date
experiment_path: ""

# Panel
panel: "pyoperant.tlab.local_tlab.BoxVirtual"

# Experiment properties
reward_value: 12.0
inactivity_before_playback: [10.0, 30.0]
inactivity_before_playback_restart: 1800.0  # 15 minutes

# Session details
num_sessions: 1

# Stimulus conditions
conditions:
    pecking:
      - class: "pyoperant.behavior.go_no_go_interrupt.RewardedCondition"
        file_path: !!python/object/apply:os.path.join [*stims, "reward"]
      - class: "pyoperant.behavior.go_no_go_interrupt.UnrewardedCondition"
        file_path: !!python/object/apply:os.path.join [*stims, "nonreward"]
    playback:
      - class: "pyoperant.tlab.pecking_test.PlaybackCondition"
        file_path: !!python/object/apply:os.path.join [*stimbase, "preference_tests", *subject]

gain:
    pecking: 0
    playback: -30

# Block properties
queue: !!python/name:pyoperant.queues.random_queue
queue_parameters:
  pecking:
    weights:
      - 0.2
      - 0.8
  playback:
    max_items: 2

record_audio:
  pecking: false
  playback: true

# Extra logging

# Log key data during polling
# log_polling: true
# log_polling_file: "keydata.log"
# debug: true

log_playback: true
log_playback_file: "playback.log"

# Log handler setup
# Possible values are stream, file, email
log_handlers:
    # stream's only option is level. Overrides "debug" parameter for logging
    stream:
        level: !!python/name:logging.INFO
    # file takes options of
    # filename: a file under experiment_path
    # level: a python logging level, written as "!!python/name:logging.LEVEL"
    file:
        filename: "experiment.log"
        level: !!python/name:logging.DEBUG
    # email takes options of
    # mailhost: where the email is sent from
    # toaddrs: a list of addresses to send to
    # fromaddr: the address to send from
    # subject: The subject line
    # credentials: not sure
    # secure: not sure
    # level: a python logging level, written as "!!python/name:logging.LEVEL"
    # email:
    #     mailhost: localhost
    #     toaddrs:
    #         - *def_email
    #     fromaddr: "Pyoperant <pyoperant@someemail.com"
    #     subject: "pyoperant notice"
    #     credentials: none
    #     secure: none
    #     level: !!python/name:logging.ERROR
    # # Setting up the slack logging requires getting a slack oauth token and finding the ID of the channel you want to post to
    # slack:
    #     token: ""
    #     annotation: "Box X"
    #     channel: ""
    #     level: !!python/name:logging.ERROR
...
